<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
	<groupId>org.timen</groupId>
	<artifactId>timen_example</artifactId>
	<version>1.0.0</version>
	<packaging>jar</packaging>
        <name>TIMEN_CONSUMER</name>                 <!-- Full name (not id) -->	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>1.7</maven.compiler.source>
                <maven.compiler.target>1.7</maven.compiler.target>		
	</properties>	
		<repositories>
		  <repository>
		    <id>fake-local-repo</id>
		    <url>file://${basedir}/local-lib-repo</url>
		  </repository>
		</repositories>	
	<build>
	
                <resources>
			<resource>
			    <directory>../TIMEN/res/knowledge-bases</directory>
			    <targetPath>../knowledge-bases</targetPath> <!--outside jar and outside classes-->
			</resource>
			<resource>
			    <directory>examples</directory>
			    <targetPath>../examples</targetPath> <!--outside jar and outside classes-->
			</resource>
			<resource>
			    <directory>.</directory>
			    <includes><include>README.TXT</include></includes>
			</resource>			
                </resources>
	
		<plugins>

			<plugin>
				<!-- Build an executable JAR -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							  <mainClass>org.timen.timen_example.Main</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			
		      <plugin>
			<artifactId>maven-resources-plugin</artifactId>
			<version>2.4.3</version>
			<executions>
			  <execution>
			    <id>copy-program-data</id>
			    <phase>package</phase>
			    <goals>
			      <goal>copy-resources</goal>
			    </goals>
			    <configuration>
			      <encoding>UTF-8</encoding>
			      <outputDirectory>${basedir}/target/program-data</outputDirectory>
			      <resources>          
				<resource>
				  <directory>program-data</directory>
				  <filtering>false</filtering>
				</resource>
			      </resources>              
			    </configuration>            
			  </execution>
			  <!-- Copy res folder into target (not necessary since k and rule-bases are included in timen jar) -->
			  <!-- Optionally, a user can copy them manually to easily update them -->
			  <!--
			  <execution>
			    <id>copy-resources</id>
			    <phase>package</phase>
			    <goals>
			      <goal>copy-resources</goal>
			    </goals>
			    <configuration>
			      <outputDirectory>${basedir}/target/res</outputDirectory>
			      <resources>          
				<resource>
				  <directory>res</directory>
				  <filtering>true</filtering>
				</resource>
			      </resources>              
			    </configuration>            
			  </execution>-->
			 </executions>
		      </plugin>			
		      
			<plugin>
			<artifactId>maven-dependency-plugin</artifactId>
			    <executions>
				<execution>
				    <phase>package</phase>
				    <goals>
					<goal>copy-dependencies</goal>
				    </goals>
				    <configuration>
					<outputDirectory>${basedir}/target/lib</outputDirectory>
				    </configuration>
				</execution>
			    </executions>
			</plugin>				            
		</plugins>
		<!--<sourceDirectory>src</sourceDirectory>
		<testSourceDirectory>test</testSourceDirectory>-->
		<!--To have the rule-bases inside the jar (not necessary since k and rule-bases are included in lib/timen jar) -->
		<!--<resources>
			<resource>
				<targetPath>res/</targetPath>
				<filtering>false</filtering>
				<directory>${basedir}/res</directory>
			</resource>
		</resources>-->
	</build>
	<dependencies>
		<!-- Dependencies for TIMEN library (These are automatically included when TIMEN is included not-locally ) -->
                <!--<dependency>
                        <groupId>org.antlr</groupId>
                        <artifactId>antlr</artifactId>
                        <version>3.4</version>
                </dependency>

                <dependency>
                        <groupId>org.xerial</groupId>
                        <artifactId>sqlite-jdbc</artifactId>
                        <version>3.7.2</version>
                </dependency>-->
		<!-- Dependencies for TIMEN_CONSUMER-->
                <dependency>
                        <groupId>junit</groupId>
                        <artifactId>junit</artifactId>
                        <version>4.11</version>
                        <scope>test</scope>
                        <type>jar</type>
                </dependency>
                <dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.2</version>
		</dependency>
                <dependency>
			<groupId>org.timen</groupId>
			<artifactId>timen</artifactId>
			<version>1.0.15</version>
		</dependency>
		<!-- These are local: remember to generate the repo distribution with mvn install:install-file -->
		<dependency>
			<groupId>FeatureBuilder</groupId>
			<artifactId>FeatureBuilder</artifactId>
			<version>0.0.1</version>
			<type>jar</type>
		</dependency>
		<dependency>
			<groupId>Utils_BasicKit</groupId>
			<artifactId>Utils_BasicKit</artifactId>
			<version>0.0.1</version>
		</dependency>
		<dependency>
			<groupId>External_Tools</groupId>
			<artifactId>External_Tools</artifactId>
			<version>0.0.1</version>
		</dependency>
		<dependency>
			<groupId>NLP_BasicKit</groupId>
			<artifactId>NLP_BasicKit</artifactId>
			<version>0.0.1</version>
		</dependency>
		<dependency>
			<groupId>TimeML_BasicKit</groupId>
			<artifactId>TimeML_BasicKit</artifactId>
			<version>0.0.1</version>
			<!-- BAD PRACTICE: All deps should be globally accessible, if not, use a local repository to fake it -->
			<!--<scope>system</scope>
			<systemPath>${basedir}/lib/TimeML_BasicKit.jar</systemPath>-->
		</dependency>
	</dependencies>
</project>
