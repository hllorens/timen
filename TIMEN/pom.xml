<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion> <!--maven model type (see schema above) -->
        <groupId>org.timen</groupId>       <!-- base package uri -->
        <artifactId>timen</artifactId>     <!-- the project name (id) -->
	<version>1.0.16-SNAPSHOT</version>  <!-- version. NOTE: must be -SNAPSHOT. Maven automatically removes that when release:prepare/perform -->        
	<packaging>jar</packaging>
        <name>TIMEN</name>                 <!-- Full name (not id) -->
        <description>Converts text temporal expressions into their normalized values (standard: ISO 8601 extension used in TimeML)</description>
        <url>http://www.timen.org/</url>
        <licenses>
                <license>
                        <name>Apache License, Version 2.0</name>
                        <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
                </license>
                <license>
                        <name>GNU General Public License, Version 3</name>
                        <url>http://www.gnu.org/licenses/gpl-3.0.txt</url>
                </license>
        </licenses>
        <scm>  <!-- source code management --> 
                <url>https://timen.googlecode.com/svn/trunk/TIMEN</url>
                <connection>scm:svn:http://timen.googlecode.com/svn/trunk/TIMEN</connection>
                <developerConnection>scm:svn:https://timen.googlecode.com/svn/trunk/TIMEN</developerConnection>
	</scm>
        <developers>
                <developer>
                        <id>hector.llorens</id>
                        <name>Hector Llorens</name>
                        <email>hectorlm1983@gmail.com</email>
                </developer>
                <developer>
                        <id>leon.derczynski</id>
                        <name>Leon Derczynski</name>
                        <email>leon@dcs.shef.ac.uk</email>
                </developer>
        </developers>
        <parent> <!-- central repository -->
                <groupId>org.sonatype.oss</groupId>
                <artifactId>oss-parent</artifactId>
                <version>7</version>
        </parent>
        <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>1.7</maven.compiler.source>
                <maven.compiler.target>1.7</maven.compiler.target>
        </properties>
       
       
        <build>
                <!--<sourceDirectory>src</sourceDirectory>
                <testSourceDirectory>test</testSourceDirectory>-->
                <resources>
			<resource>
			    <directory>res/rule-bases</directory>
			    <targetPath>rule-bases</targetPath> <!-- in the future be consistent -->
			    <!--<directory>res</directory>-->
			    <!--<targetPath>../resources</targetPath>  DOCUMENT Â¿WHY? HAVING RESOURCES EXTERNAL TO JAR??? db inside is fine -->
			</resource>
			<!-- if you want to use standard file system functions like .exists() or file handling (get resource as stream not in context of FS) it is better to have an external version of the resources, inside jar they are compressed and hidden for the normal file system -->
			<resource>
			    <directory>res/knowledge-bases</directory>
			    <targetPath>knowledge-bases</targetPath> <!--inside jar and classes-->
			</resource>
			<!--outside jar and outside classes-->
			<!--<resource>
			    <directory>res/knowledge-bases</directory>
			    <targetPath>../knowledge-bases</targetPath> 
			</resource>-->
			<resource>
			    <directory>.</directory>
			    <includes><include>README.TXT</include></includes>
			    <!--<targetPath>..</targetPath> -->
			</resource>			
                </resources>
                <plugins>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>org.timen.timen.Main</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin> 
				<!-- TODO needs execution and goals definition to work properly... 
				http://www.sonatype.com/books/nexus-book/reference/staging-sect-deployment.html -->			
			<!--<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<version>1.2</version>
				<extensions>true</extensions>
				<configuration>
				<serverId>sonatype-nexus-staging</serverId>
				<nexusUrl>https://oss.sonatype.org</nexusUrl>
				</configuration>
			</plugin>-->			
                        <plugin>  <artifactId>maven-release-plugin</artifactId>    </plugin>
                        <plugin>
		                <groupId>org.apache.maven.plugins</groupId>
		                <artifactId>maven-gpg-plugin</artifactId>
						<version>1.4</version>						
		                <executions>
		                  <execution>
		                    <id>sign-artifacts</id>
		                    <phase>verify</phase>
		                    <goals>
		                      <goal>sign</goal>
		                    </goals>
		                  </execution>
		                </executions>
                        </plugin>
                </plugins>              
        </build>
       
       
        <dependencies>
                <dependency>
                        <groupId>org.antlr</groupId>
                        <artifactId>antlr</artifactId>
                        <version>3.4</version>
                </dependency>
                <dependency>
                        <groupId>junit</groupId>
                        <artifactId>junit</artifactId>
                        <version>4.11</version>
                        <scope>test</scope>
                        <type>jar</type>
                </dependency>
                <dependency>
                        <groupId>org.xerial</groupId>
                        <artifactId>sqlite-jdbc</artifactId>
                        <version>3.7.2</version>
                </dependency>
		<dependency>
		    <groupId>commons-cli</groupId>
		    <artifactId>commons-cli</artifactId>
		    <version>1.2</version>
		</dependency>
        </dependencies>
</project>

